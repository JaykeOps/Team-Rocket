//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FootballManager.Admin.MatchService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MatchService.IMatchService")]
    public interface IMatchService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/AddMatch", ReplyAction="http://tempuri.org/IMatchService/AddMatchResponse")]
        void AddMatch(Domain.Entities.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/AddMatch", ReplyAction="http://tempuri.org/IMatchService/AddMatchResponse")]
        System.Threading.Tasks.Task AddMatchAsync(Domain.Entities.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/AddMatchFromList", ReplyAction="http://tempuri.org/IMatchService/AddMatchFromListResponse")]
        void AddMatchFromList(Domain.Entities.Match[] matches);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/AddMatchFromList", ReplyAction="http://tempuri.org/IMatchService/AddMatchFromListResponse")]
        System.Threading.Tasks.Task AddMatchFromListAsync(Domain.Entities.Match[] matches);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/EditMatchLocation", ReplyAction="http://tempuri.org/IMatchService/EditMatchLocationResponse")]
        void EditMatchLocation(string newArenaName, System.Guid matchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/EditMatchLocation", ReplyAction="http://tempuri.org/IMatchService/EditMatchLocationResponse")]
        System.Threading.Tasks.Task EditMatchLocationAsync(string newArenaName, System.Guid matchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/EditMatchTime", ReplyAction="http://tempuri.org/IMatchService/EditMatchTimeResponse")]
        void EditMatchTime(System.DateTime dateTime, System.Guid matchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/EditMatchTime", ReplyAction="http://tempuri.org/IMatchService/EditMatchTimeResponse")]
        System.Threading.Tasks.Task EditMatchTimeAsync(System.DateTime dateTime, System.Guid matchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/FindById", ReplyAction="http://tempuri.org/IMatchService/FindByIdResponse")]
        Domain.Entities.Match FindById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/FindById", ReplyAction="http://tempuri.org/IMatchService/FindByIdResponse")]
        System.Threading.Tasks.Task<Domain.Entities.Match> FindByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetAll", ReplyAction="http://tempuri.org/IMatchService/GetAllResponse")]
        Domain.Entities.Match[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetAll", ReplyAction="http://tempuri.org/IMatchService/GetAllResponse")]
        System.Threading.Tasks.Task<Domain.Entities.Match[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/Search", ReplyAction="http://tempuri.org/IMatchService/SearchResponse")]
        Domain.Entities.Match[] Search(string searchText, System.StringComparison comparison);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/Search", ReplyAction="http://tempuri.org/IMatchService/SearchResponse")]
        System.Threading.Tasks.Task<Domain.Entities.Match[]> SearchAsync(string searchText, System.StringComparison comparison);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchServiceChannel : FootballManager.Admin.MatchService.IMatchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchServiceClient : System.ServiceModel.ClientBase<FootballManager.Admin.MatchService.IMatchService>, FootballManager.Admin.MatchService.IMatchService {
        
        public MatchServiceClient() {
        }
        
        public MatchServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MatchServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddMatch(Domain.Entities.Match match) {
            base.Channel.AddMatch(match);
        }
        
        public System.Threading.Tasks.Task AddMatchAsync(Domain.Entities.Match match) {
            return base.Channel.AddMatchAsync(match);
        }
        
        public void AddMatchFromList(Domain.Entities.Match[] matches) {
            base.Channel.AddMatchFromList(matches);
        }
        
        public System.Threading.Tasks.Task AddMatchFromListAsync(Domain.Entities.Match[] matches) {
            return base.Channel.AddMatchFromListAsync(matches);
        }
        
        public void EditMatchLocation(string newArenaName, System.Guid matchId) {
            base.Channel.EditMatchLocation(newArenaName, matchId);
        }
        
        public System.Threading.Tasks.Task EditMatchLocationAsync(string newArenaName, System.Guid matchId) {
            return base.Channel.EditMatchLocationAsync(newArenaName, matchId);
        }
        
        public void EditMatchTime(System.DateTime dateTime, System.Guid matchId) {
            base.Channel.EditMatchTime(dateTime, matchId);
        }
        
        public System.Threading.Tasks.Task EditMatchTimeAsync(System.DateTime dateTime, System.Guid matchId) {
            return base.Channel.EditMatchTimeAsync(dateTime, matchId);
        }
        
        public Domain.Entities.Match FindById(System.Guid id) {
            return base.Channel.FindById(id);
        }
        
        public System.Threading.Tasks.Task<Domain.Entities.Match> FindByIdAsync(System.Guid id) {
            return base.Channel.FindByIdAsync(id);
        }
        
        public Domain.Entities.Match[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<Domain.Entities.Match[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public Domain.Entities.Match[] Search(string searchText, System.StringComparison comparison) {
            return base.Channel.Search(searchText, comparison);
        }
        
        public System.Threading.Tasks.Task<Domain.Entities.Match[]> SearchAsync(string searchText, System.StringComparison comparison) {
            return base.Channel.SearchAsync(searchText, comparison);
        }
    }
}
